% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RSEC.R, R/clusterManyPage.R, R/combineMany.R, R/directions.R, R/inputFunctions.R, R/loadFiles.R, R/loadFiles_server.R, R/loadFiles_ui.R, R/makeCodeAll.R, R/makeDendrogram.R, R/mergeClusters.R, R/plotClusterModule.R, R/plotCoClustering.R, R/plotDendrogram.R, R/plotHeatmap.R, R/saveObject.R, R/startPage.R, R/utilityFunctions.R, R/whatClusters.R
\docType{data}
\name{RSECInputs}
\alias{InternalModules}
\alias{RSECHelpText}
\alias{RSECInputs}
\alias{addArguments}
\alias{assignGlobal}
\alias{capwords}
\alias{clusterFunctionChoices}
\alias{clusterFunctionInputs}
\alias{clusterManyHelpText}
\alias{colDataFile}
\alias{combineArgs}
\alias{combineManyHelpText}
\alias{combineManyInput}
\alias{convertSideLabel}
\alias{countInfo}
\alias{csvAssay}
\alias{csvAssayCode}
\alias{csvColCode}
\alias{csvColData}
\alias{csvRowCode}
\alias{csvRowData}
\alias{dataFile}
\alias{dimReduceOptions}
\alias{findDefaults}
\alias{getAdditionalDefaults}
\alias{getIsCount}
\alias{getIterations}
\alias{loadHelpText}
\alias{logicalInput}
\alias{makeClusterManyCode}
\alias{makeCombineManyCode}
\alias{makeDendrogramHelpText}
\alias{makeDendrogramInput}
\alias{makeFileWithDateTag}
\alias{makeMakeDendrogramCode}
\alias{makeMergeClustersCode}
\alias{makePlotClustersCode}
\alias{makePlotCoClusteringCode}
\alias{makePlotDendrogramCode}
\alias{makePlotHeatmapCode}
\alias{mergeClustersHelpText}
\alias{mergeClustersInput}
\alias{methodFormals}
\alias{multipleOptionsInput}
\alias{plotClusterInput}
\alias{plotClustersHelpText}
\alias{plotClustersInput}
\alias{plotCoClusteringHelpText}
\alias{plotCoClusteringInput}
\alias{plotDendrogramHelpText}
\alias{plotDendrogramInput}
\alias{plotHeatmapHelpText}
\alias{rdaFile}
\alias{rdaFileInput}
\alias{rowDataFile}
\alias{runCodeAssignGlobal}
\alias{sSBInputs}
\alias{saveObjectMessage}
\alias{setUpConditionalPanelTest}
\alias{setWD}
\alias{singleCharacterInput}
\alias{singleNumericInput}
\alias{singleOptionsInput}
\alias{specializedInputs}
\alias{startPageMessage}
\alias{testArguments}
\alias{vectorInput}
\alias{whatClusters}
\title{Internal modules used by shiny app}
\format{An object of class \code{character} of length 5.}
\usage{
RSECInputs(id)

sSBInputs(id, label = "SSB inputs")

dimReduceOptions

clusterFunctionChoices

clusterFunctionInputs(id, label = "inputs", isRSEC = FALSE)

specializedInputs(id, label = "Specializedinputs", isRSEC = FALSE)

getIterations(codeText, isRSEC = FALSE, countIterations = TRUE)

combineManyInput(id, label = "cMInputs")

RSECHelpText()

clusterManyHelpText()

combineManyHelpText(id, label = "help title and text")

makeDendrogramHelpText(id, label = "help title and text")

mergeClustersHelpText(id, label = "help title and text")

singleCharacterInput(id, sidelabel, aboveLabel, val, defaultValue = NULL,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName, ...)

singleNumericInput(id, sidelabel, aboveLabel, val, defaultValue = NULL,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName, ...)

vectorInput(id, sidelabel, aboveLabel, val, defaultValue = "",
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName)

logicalInput(id, sidelabel, val, help = "No help yet available",
  required = FALSE, checkbox = FALSE, defaultValue = NULL,
  multipleAllowed = TRUE, functionName)

multipleOptionsInput(id, sidelabel, options, val,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  defaultValue = NULL, functionName)

singleOptionsInput(id, sidelabel, options, val,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  defaultValue = NULL, functionName)

setUpConditionalPanelTest(id, val, allOptions, validOptions)

convertSideLabel(sidelabel, val)

methodFormals(f, signature = character())

getAdditionalDefaults(class, functionName, ceDefaults)

findDefaults(val, functionName)

capwords(s, strict = FALSE)

loadHelpText()

countInfo(id, label = "count and transformation decisions")

getIsCount(input, output, session)

setWD(id, label = "start message")

rdaFileInput(id, label = "upload rds file")

rdaFile(input, output, session, stringsAsFactors)

csvAssay(id, label = "upload .csv file")

csvColData(id, label = "upload .csv file")

csvRowData(id, label = "upload .csv file")

dataFile(input, output, session, stringsAsFactors)

csvAssayCode(input, output, session, stringsAsFactors)

colDataFile(input, output, session, stringsAsFactors)

csvColCode(input, output, session, stringsAsFactors)

rowDataFile(input, output, session, stringsAsFactors)

csvRowCode(input, output, session, stringsAsFactors)

getIsCount(input, output, session)

rdaFile(input, output, session, stringsAsFactors)

dataFile(input, output, session, stringsAsFactors)

csvAssayCode(input, output, session, stringsAsFactors)

colDataFile(input, output, session, stringsAsFactors)

csvColCode(input, output, session, stringsAsFactors)

rowDataFile(input, output, session, stringsAsFactors)

csvRowCode(input, output, session, stringsAsFactors)

loadHelpText()

countInfo(id, label = "count and transformation decisions")

setWD(id, label = "start message")

rdaFileInput(id, label = "upload rds file")

csvAssay(id, label = "upload .csv file")

csvColData(id, label = "upload .csv file")

csvRowData(id, label = "upload .csv file")

makeClusterManyCode(input, output, session, stringsAsFactors, isRSEC = FALSE,
  countModule)

makeMakeDendrogramCode(input, output, session, stringsAsFactors)

makeCombineManyCode(input, output, session, stringsAsFactors)

makeMergeClustersCode(input, output, session, stringsAsFactors)

makeDendrogramInput(id, label = "cMInputs")

mergeClustersInput(id, label = "cMInputs")

plotClustersInput(id, label = "plotCluster inputs")

makePlotClustersCode(input, output, session, stringsAsFactors)

plotClustersHelpText(id, label = "help title and text")

plotCoClusteringInput(id, label = "plotCluster inputs")

makePlotCoClusteringCode(input, output, session, stringsAsFactors)

plotCoClusteringHelpText(id, label = "help title and text")

plotDendrogramInput(id, label = "plotDendrogram inputs")

makePlotDendrogramCode(input, output, session, stringsAsFactors)

plotDendrogramHelpText(id, label = "help title and text")

plotClusterInput(id, label = "plotCluster inputs")

makePlotHeatmapCode(input, output, session, stringsAsFactors)

plotHeatmapHelpText(id, label = "help title and text")

saveObjectMessage(id, label = "start message")

startPageMessage(id, label = "start message")

assignGlobal(name, value)

runCodeAssignGlobal(codeText)

addArguments(input, currCode, val, isCharacter = TRUE)

testArguments(input, val)

combineArgs(input, currCode, val, isCharacter = TRUE)

makeFileWithDateTag(file, wd)

whatClusters(id, label = "What Clusters Text")
}
\details{
logicalInput is for taking TRUE/FALSE values, but is only for if both options are possible (like for clusterMany)

addArguments pastes additional arguments for constructing code.

testArguments tests whether arguments have been checked
}
\keyword{datasets}

