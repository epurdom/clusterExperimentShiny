% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputFunctions.R, R/loadFiles_server.R, R/loadFiles_ui.R, R/makeCodeAll.R, R/makePlotCode.R, R/plotCoClustering.R, R/plotDendrogram.R, R/plotHeatmap.R, R/saveObject.R, R/startPage.R, R/utilityFunctions.R, R/whatClusters.R
\docType{data}
\name{singleCharacterInput}
\alias{InternalModules}
\alias{addArguments}
\alias{assignGlobal}
\alias{capwords}
\alias{combineArgs}
\alias{convertSideLabel}
\alias{countInfo}
\alias{createSummarizedExp}
\alias{csvAssay}
\alias{csvColData}
\alias{csvRowData}
\alias{findDefaults}
\alias{getAdditionalDefaults}
\alias{getIsCount}
\alias{logicalInput}
\alias{makeFileWithDateTag}
\alias{makePlotCoClusteringCode}
\alias{makePlotDendrogramCode}
\alias{makePlotHeatmapCode}
\alias{methodFormals}
\alias{multipleOptionsInput}
\alias{plotCMar}
\alias{plotClustersServer}
\alias{plotCoClusteringHelpText}
\alias{plotCoClusteringInput}
\alias{plotDendrogramHelpText}
\alias{plotDendrogramInput}
\alias{plotHeatmapHelpText}
\alias{plotHeatmapInput}
\alias{rdaFile}
\alias{rdaFileInput}
\alias{readCSVInput}
\alias{recordCodeFun}
\alias{runCodeAssignGlobal}
\alias{saveObjectMessage}
\alias{setUpConditionalPanelTest}
\alias{singleCharacterInput}
\alias{singleNumericInput}
\alias{singleOptionsInput}
\alias{startPageMessage}
\alias{testArguments}
\alias{vectorInput}
\alias{whatClusters}
\format{An object of class \code{numeric} of length 4.}
\usage{
singleCharacterInput(id, sidelabel, aboveLabel, val, defaultValue = NULL,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName, ...)

singleNumericInput(id, sidelabel, aboveLabel, val, defaultValue = NULL,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName, ...)

vectorInput(id, sidelabel, aboveLabel, val, defaultValue = "",
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  functionName)

logicalInput(id, sidelabel, val, help = "No help yet available",
  required = FALSE, checkbox = FALSE, defaultValue = NULL,
  multipleAllowed = TRUE, functionName)

multipleOptionsInput(id, sidelabel, options, val,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  defaultValue = NULL, functionName)

singleOptionsInput(id, sidelabel, options, val,
  help = "No help yet available", required = FALSE, checkbox = FALSE,
  defaultValue = NULL, functionName)

setUpConditionalPanelTest(id, val, allOptions, validOptions)

convertSideLabel(sidelabel, val)

methodFormals(f, signature = character())

getAdditionalDefaults(class, functionName, ceDefaults)

findDefaults(val, functionName)

capwords(s, strict = FALSE)

getIsCount(input, output, session)

rdaFile(input, output, session, stringsAsFactors, recordCode = FALSE,
  recordFile)

readCSVInput(input, output, session, recordCode = FALSE, whichData,
  recordFile, recordSection = FALSE, nrows = -1)

createSummarizedExp(assay, colData, rowData, recordCode, recordTag, recordFile)

countInfo(id, label = "count and transformation decisions")

rdaFileInput(id, label = "upload rds file")

csvAssay(id, label = "upload .csv file")

csvColData(id, label = "upload .csv file")

csvRowData(id, label = "upload .csv file")

makePlotCoClusteringCode(input, output, session, setParameters = TRUE)

makePlotDendrogramCode(input, output, session, setParameters = TRUE)

makePlotHeatmapCode(input, output, session, setParameters = TRUE)

plotCMar

plotClustersServer(code, fileName = NULL, recordCode = FALSE,
  type = c("plotClusters", "plotCoClustering", "plotHeatmap",
  "plotDendrogram"))

plotCoClusteringInput(id, label = "plotCluster inputs")

plotCoClusteringHelpText(id, label = "help title and text")

plotDendrogramInput(id, label = "plotDendrogram inputs")

plotDendrogramHelpText(id, label = "help title and text")

plotHeatmapInput(id, label = "plotCluster inputs")

plotHeatmapHelpText(id, label = "help title and text")

saveObjectMessage(id, label = "start message")

startPageMessage(id, label = "start message")

assignGlobal(name, value)

runCodeAssignGlobal(codeText, recordCode, recordTag)

recordCodeFun(code, tag, section = FALSE)

addArguments(input, currCode, val, isCharacter = TRUE)

testArguments(input, val)

combineArgs(input, currCode, val, isCharacter = TRUE)

makeFileWithDateTag(file, wd)

whatClusters(id, label = "What Clusters Text")
}
\details{
logicalInput is for taking TRUE/FALSE values, but is only for if both options are possible (like for clusterMany)

addArguments pastes additional arguments for constructing code.

testArguments tests whether arguments have been checked
}
\keyword{datasets}

